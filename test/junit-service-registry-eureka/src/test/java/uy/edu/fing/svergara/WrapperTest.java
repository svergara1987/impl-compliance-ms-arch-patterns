package uy.edu.fing.svergara;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

public class WrapperTest extends TestCase {
	
	public WrapperTest(String testName) {
		super(testName);
	}

	public static Test suite() {
		return new TestSuite(WrapperTest.class);
	}
	
	public void testCase_1() {
		// case setup
		Endpoints endpoints = Endpoints.parse("{}");
		HealthApis health_apis = HealthApis.parse("{}");
		SetString last_endpoint_active_query_result = SetString.parse("{}");
		SetString last_health_query_result = SetString.parse("{}");
		SetString services = SetString.parse("{}");
		Integer time = 0;
		SetString unavailable_endpoints = SetString.parse("{}");
		// case execution
		Wrapper app = new Wrapper();
		app.initialisation(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E5";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		HealthApiResponses health_api_responses = HealthApiResponses.parse("{}");
		app.clock(health_api_responses);
		time = 1;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_service = "S4";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E3";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S4";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S4";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{}");
		app.clock(health_api_responses);
		time = 2;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E5";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E3";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{}");
		app.clock(health_api_responses);
		time = 3;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S3|->{})}");
		services = SetString.parse("{S3}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_health_check_api = "HCA1";
		a_service = "S3";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E2})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S3";
		an_endpoint = "E1";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E1,E2})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		an_endpoint = "E2";
		app.remove_endpoint(a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E1})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E3";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->TRUE)}");
		app.clock(health_api_responses);
		time = 4;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E4";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S3";
		an_endpoint = "E4";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E1,E4})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S3";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E1,E2,E4})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		an_endpoint = "E2";
		app.remove_endpoint(a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S3|->{E1,E4})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S1|->{}),(S3|->{E1,E4})}");
		services = SetString.parse("{S1,S3}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S1";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S1|->{E2}),(S3|->{E1,E4})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		an_endpoint = "E1";
		app.remove_endpoint(a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA1),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S1|->{E2}),(S3|->{E4})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
	}
	
	public void testCase_2() {
		// case setup
		Endpoints endpoints = Endpoints.parse("{}");
		HealthApis health_apis = HealthApis.parse("{}");
		SetString last_endpoint_active_query_result = SetString.parse("{}");
		SetString last_health_query_result = SetString.parse("{}");
		SetString services = SetString.parse("{}");
		Integer time = 0;
		SetString unavailable_endpoints = SetString.parse("{}");
		// case execution
		Wrapper app = new Wrapper();
		app.initialisation(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_service = "S3";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S3|->{})}");
		services = SetString.parse("{S3}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S3|->{}),(S5|->{})}");
		services = SetString.parse("{S3,S5}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String an_endpoint = "E4";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S1|->{}),(S3|->{}),(S5|->{})}");
		services = SetString.parse("{S1,S3,S5}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E4";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.unregister(a_service);
		endpoints = Endpoints.parse("{(S1|->{}),(S3|->{})}");
		services = SetString.parse("{S1,S3}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_health_check_api = "HCA2";
		a_service = "S1";
		an_endpoint = "E1";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA2)}");
		endpoints = Endpoints.parse("{(S1|->{E1}),(S3|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S4";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S1|->{E1}),(S3|->{}),(S4|->{})}");
		services = SetString.parse("{S1,S3,S4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S1";
		an_endpoint = "E4";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA2),(E4|->HCA1)}");
		endpoints = Endpoints.parse("{(S1|->{E1,E4}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.unregister(a_service);
		health_apis = HealthApis.parse("{}");
		endpoints = Endpoints.parse("{(S3|->{}),(S4|->{})}");
		services = SetString.parse("{S3,S4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S2|->{}),(S3|->{}),(S4|->{})}");
		services = SetString.parse("{S2,S3,S4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S2";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E2}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S2";
		an_endpoint = "E1";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		an_endpoint = "E1";
		app.remove_endpoint(a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E2}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E2";
		app.query_health_apis(an_endpoint);
		last_health_query_result = SetString.parse("{HCA2}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E1";
		app.query_health_apis(an_endpoint);
		last_health_query_result = SetString.parse("{}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S2";
		an_endpoint = "E3";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA2),(E3|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E2,E3}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		HealthApiResponses health_api_responses = HealthApiResponses.parse("{(E2|->TRUE),(E3|->TRUE)}");
		app.clock(health_api_responses);
		time = 1;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E5";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S2";
		an_endpoint = "E5";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA2),(E3|->HCA2),(E5|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E2,E3,E5}),(S3|->{}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S2|->{E2,E3,E5}),(S3|->{}),(S4|->{}),(S5|->{})}");
		services = SetString.parse("{S2,S3,S4,S5}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S1|->{}),(S2|->{E2,E3,E5}),(S3|->{}),(S4|->{}),(S5|->{})}");
		services = SetString.parse("{S1,S2,S3,S4,S5}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S3";
		an_endpoint = "E1";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA2),(E3|->HCA2),(E5|->HCA2)}");
		endpoints = Endpoints.parse("{(S1|->{}),(S2|->{E2,E3,E5}),(S3|->{E1}),(S4|->{}),(S5|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S3";
		an_endpoint = "E4";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA2),(E3|->HCA2),(E4|->HCA2),(E5|->HCA2)}");
		endpoints = Endpoints.parse("{(S1|->{}),(S2|->{E2,E3,E5}),(S3|->{E1,E4}),(S4|->{}),(S5|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		an_endpoint = "E5";
		app.remove_endpoint(a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA2),(E3|->HCA2),(E4|->HCA2)}");
		endpoints = Endpoints.parse("{(S1|->{}),(S2|->{E2,E3}),(S3|->{E1,E4}),(S4|->{}),(S5|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->FALSE),(E2|->TRUE),(E3|->FALSE),(E4|->FALSE)}");
		app.clock(health_api_responses);
		time = 2;
		unavailable_endpoints = SetString.parse("{E1,E3,E4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E5";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
	}
	
	public void testCase_3() {
		// case setup
		Endpoints endpoints = Endpoints.parse("{}");
		HealthApis health_apis = HealthApis.parse("{}");
		SetString last_endpoint_active_query_result = SetString.parse("{}");
		SetString last_health_query_result = SetString.parse("{}");
		SetString services = SetString.parse("{}");
		Integer time = 0;
		SetString unavailable_endpoints = SetString.parse("{}");
		// case execution
		Wrapper app = new Wrapper();
		app.initialisation(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E4";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E5";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_service = "S1";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		HealthApiResponses health_api_responses = HealthApiResponses.parse("{}");
		app.clock(health_api_responses);
		time = 1;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{}");
		app.clock(health_api_responses);
		time = 2;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S2|->{})}");
		services = SetString.parse("{S2}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E3";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S3";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E6";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E4";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		an_endpoint = "E3";
		app.query_health_apis(an_endpoint);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		String a_health_check_api = "HCA1";
		a_service = "S2";
		an_endpoint = "E1";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1)}");
		endpoints = Endpoints.parse("{(S2|->{E1})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->FALSE)}");
		app.clock(health_api_responses);
		time = 3;
		unavailable_endpoints = SetString.parse("{E1}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S2";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->TRUE),(E2|->TRUE)}");
		app.clock(health_api_responses);
		time = 4;
		unavailable_endpoints = SetString.parse("{}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S4";
		app.register(a_service);
		endpoints = Endpoints.parse("{(S2|->{E1,E2}),(S4|->{})}");
		services = SetString.parse("{S2,S4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S2";
		an_endpoint = "E4";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E4|->HCA2)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2,E4}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S1";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->TRUE),(E2|->TRUE),(E4|->TRUE)}");
		app.clock(health_api_responses);
		time = 5;
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->TRUE),(E2|->TRUE),(E4|->FALSE)}");
		app.clock(health_api_responses);
		time = 6;
		unavailable_endpoints = SetString.parse("{E4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA1";
		a_service = "S2";
		an_endpoint = "E5";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E4|->HCA2),(E5|->HCA1)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2,E4,E5}),(S4|->{})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S5";
		app.query_endpoints(a_service);
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA2";
		a_service = "S4";
		an_endpoint = "E3";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E3|->HCA2),(E4|->HCA2),(E5|->HCA1)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2,E4,E5}),(S4|->{E3})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		an_endpoint = "E4";
		app.remove_endpoint(a_service, an_endpoint);
		unavailable_endpoints = SetString.parse("{}");
		health_apis = HealthApis.parse("{(E1|->HCA1),(E2|->HCA1),(E3|->HCA2),(E5|->HCA1)}");
		endpoints = Endpoints.parse("{(S2|->{E1,E2,E5}),(S4|->{E3})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		health_api_responses = HealthApiResponses.parse("{(E1|->FALSE),(E2|->TRUE),(E3|->FALSE),(E5|->FALSE)}");
		app.clock(health_api_responses);
		time = 7;
		unavailable_endpoints = SetString.parse("{E1,E3,E5}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_service = "S2";
		app.unregister(a_service);
		unavailable_endpoints = SetString.parse("{E3}");
		health_apis = HealthApis.parse("{(E3|->HCA2)}");
		endpoints = Endpoints.parse("{(S4|->{E3})}");
		services = SetString.parse("{S4}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
		a_health_check_api = "HCA3";
		a_service = "S4";
		an_endpoint = "E2";
		app.add_endpoint(a_health_check_api, a_service, an_endpoint);
		health_apis = HealthApis.parse("{(E2|->HCA3),(E3|->HCA2)}");
		endpoints = Endpoints.parse("{(S4|->{E2,E3})}");
		assertTrue(app.isValid(endpoints, health_apis, last_endpoint_active_query_result, last_health_query_result, services, time, unavailable_endpoints));
	}
	

}